(*) About Factory Design Pattern in this example: there is no need to create a Factory
interface or Abstract class, since there is only one client (the main function), which
means this client should be able to instantiate objects from concrete products.
In another example where there is at least one client that doesn't need to know about
the concrete Factory, we'll consider using Abstraction. The problem is
that (according to the subject) the Factory cannot supply parameters to the concrete
commands, so i have to inject them through setters, and since these setters aren't
part of the contract set by the Command Interface, and they are crucial if you want
to execute the concrete commands, using the Interface is redundant. So using factory
is also redundant. (the factory is returning a pointer to the Command Interface
which cannot be used to supply the parameters for each concrete command).
The solution proposed by my Friend Oussama is dynamic cast (casting the Form into its
subtypes), this will solve this problem: The factory will encapsulate the object creation
logic and returns a Form *, which is then casted to the appropriate concrete form, and
then supplied by the corresponding parameters and signed by the headmaster...